---
description: 
globs: 
alwaysApply: true
---
As follows is a brief "braindump" of potential ways to go with the project. Since this is from an early brainstorm, things might change throughout development - make sure to trust raw code more.

**Backend** - FastAPI (`^0.115.12`) running in a slim Python **3.12** container. One SQLite file (`database.sqlite`) holds both `games` metadata (FTS5 enabled) and `game_embs` vectors (sqlite-vec `vec0` table, assumed 1536-d OpenAI _text-embedding-3-small_). Connections are opened per-worker using `mode=rw` (required for WAL) with `check_same_thread=False`, `WAL` journal mode enabled for concurrency, and `sqlite-vec` loaded. Hybrid search (BM25 + ANN Cosine) will eventually be implemented in the application logic using results from separate FTS and vector queries. Currently, the data pipeline is handled via notebooks, and is unlikely to change throughout the remainder of the project. 

**Frontend & Infra** - Vite-bootstrapped React app (React 19, Mantine v8 + React-Router) served by a dedicated Nginx container. Both backend and frontend containers are intended to run in a single Cloud Run revision, potentially using `run.googleapis.com/container-dependencies`. Cloud Run likely routes traffic, e.g., `/api/**` to the backend container and `/` to the frontend Nginx container. Assets are hashed (standard Vite). Routes like `/g/:slug`, `/search`, `/t?...` are managed by React Router. A PWA layer (`vite-plugin-pwa`) is not currently implemented but remains an option.

**CI/CD & Ops** - Monorepo containing `backend/`, `frontend/`, `experiments/` (other dirs like `data-pipeline/` or `infra/` might exist). A GitHub Actions workflow (`build-push-images.yml`) uses `docker/setup-buildx-action` to build images for changes in `backend/` or `frontend/` on pushes to `main`. It pushes to Google Artifact Registry (`us-central1-docker.pkg.dev/pax-pal-2025/pax-pal-2025-webapp/{backend,frontend}:{SHA,latest}`) using Workload Identity Federation for authentication. A separate deployment workflow (using e.g., `google-github-actions/deploy-cloudrun@v1`) is assumed to handle deploying new image revisions to Cloud Run. Embedding/DB artifacts are likely stored in GCS and copied during the backend image build. Cloud Logging & Error Reporting are default Cloud Run features. 
