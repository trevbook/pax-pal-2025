# -----------------------------------------------------------------------------
# Workflow Name: This is the display name for the workflow in GitHub Actions UI.
# -----------------------------------------------------------------------------
name: Build and Push Docker Images to GAR

# -----------------------------------------------------------------------------
# Trigger: Defines when this workflow will run.
# Here, it runs on every push to the 'main' branch.
# -----------------------------------------------------------------------------
on:
  push:
    branches: [main]

# -----------------------------------------------------------------------------
# Environment Variables: Global variables used throughout the workflow.
# These include GCP project info, image names, and tags.
# -----------------------------------------------------------------------------
env:
  GCP_PROJECT_ID: pax-pal-2025
  GAR_LOCATION: us-central1
  GAR_REPOSITORY_ID: pax-pal-2025-webapp
  BACKEND_IMAGE_NAME: backend
  FRONTEND_IMAGE_NAME: frontend
  IMAGE_TAG: ${{ github.sha }}
  LATEST_TAG: latest

# -----------------------------------------------------------------------------
# Jobs: Defines the sequence of jobs to run in this workflow.
# - 'changes': Detects which parts of the codebase have changed.
# - 'build-and-push-backend': Builds & pushes the backend Docker image if needed.
# - 'build-and-push-frontend': Builds & pushes the frontend Docker image if needed.
# - 'deploy-to-cloud-run': Deploys the frontend and backend images to Google Cloud Run as a multi-container service.
# -----------------------------------------------------------------------------
jobs:
  # ---------------------------------------------------------------------------
  # Job: changes
  # Detects if there are changes in backend or frontend directories.
  # Outputs are used to conditionally run build jobs.
  # ---------------------------------------------------------------------------
  changes:
    name: Detect Changed Paths
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'

  # ---------------------------------------------------------------------------
  # Job: build-and-push-backend
  # Builds and pushes the backend Docker image to Google Artifact Registry (GAR)
  # if there are changes in the backend directory.
  # ---------------------------------------------------------------------------
  build-and-push-backend:
    name: Build and Push Backend Image
    needs: changes
    if: needs.changes.outputs.backend == 'true' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          token_format: "access_token"

      - name: Install Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Download database from GCS
        run: |-
          gsutil cp gs://pax-pal-2025-webapp/database.sqlite ./backend/database.sqlite
        env:
          CLOUDSDK_CORE_PROJECT: ${{ env.GCP_PROJECT_ID }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GAR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY_ID }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY_ID }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.LATEST_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ---------------------------------------------------------------------------
  # Job: build-and-push-frontend
  # Builds and pushes the frontend Docker image to Google Artifact Registry (GAR)
  # if there are changes in the frontend directory.
  # ---------------------------------------------------------------------------
  build-and-push-frontend:
    name: Build and Push Frontend Image
    needs: changes
    if: needs.changes.outputs.frontend == 'true' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          token_format: "access_token"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GAR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY_ID }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY_ID }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.LATEST_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ---------------------------------------------------------------------------
  # Job: deploy-to-cloud-run
  # Deploys the frontend and backend images to Google Cloud Run as a
  # multi-container service.
  # Runs if there were changes to backend or frontend and images were pushed.
  # ---------------------------------------------------------------------------
  deploy-to-cloud-run:
    name: Deploy to Cloud Run
    needs: [changes, build-and-push-backend, build-and-push-frontend] # Ensures build jobs are considered
    if: always() && (needs.changes.outputs.backend == 'true' || needs.changes.outputs.frontend == 'true') && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write" # Required for Workload Identity Federation

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          token_format: "access_token"

      - name: Set up Google Cloud SDK # Ensure gcloud is available
        uses: google-github-actions/setup-gcloud@v2

      - name: Ensure OpenAI API Key Secret in Google Secret Manager
        env:
          OPENAI_API_KEY_GH_SECRET: ${{ secrets.OPENAI_API_KEY_SECRET }}
          GCP_PROJECT_ID_FOR_SECRET: ${{ env.GCP_PROJECT_ID }}
          SECRET_NAME: openai-api-key
        run: |
          echo "Checking for Secret Manager secret: $SECRET_NAME"
          if ! gcloud secrets describe $SECRET_NAME --project=$GCP_PROJECT_ID_FOR_SECRET > /dev/null 2>&1; then
            echo "Secret $SECRET_NAME does not exist, creating it..."
            gcloud secrets create $SECRET_NAME \
              --project=$GCP_PROJECT_ID_FOR_SECRET \
              --replication-policy=automatic \
              --labels=managed-by=github-actions
            echo "Secret $SECRET_NAME created."
          else
            echo "Secret $SECRET_NAME already exists."
          fi
          echo "Adding/Updating version for secret $SECRET_NAME..."
          echo -n "$OPENAI_API_KEY_GH_SECRET" | gcloud secrets versions add $SECRET_NAME \
            --project=$GCP_PROJECT_ID_FOR_SECRET \
            --data-file=-
          echo "Secret version added/updated for $SECRET_NAME."

      - name: Generate Service YAML from template
        run: |
          echo "Generating Cloud Run service YAML from template..."
          mkdir -p .github/cloudrun # Ensure directory exists

          # Prepare environment variables for substitution
          if [[ "${{ needs.changes.outputs.frontend }}" == "true" ]]; then
            FRONTEND_TAG_FOR_SUBST="${{ env.IMAGE_TAG }}"
          else
            FRONTEND_TAG_FOR_SUBST="${{ env.LATEST_TAG }}"
          fi
          echo "Frontend image tag for deployment: $FRONTEND_TAG_FOR_SUBST"

          if [[ "${{ needs.changes.outputs.backend }}" == "true" ]]; then
            BACKEND_TAG_FOR_SUBST="${{ env.IMAGE_TAG }}"
          else
            BACKEND_TAG_FOR_SUBST="${{ env.LATEST_TAG }}"
          fi
          echo "Backend image tag for deployment: $BACKEND_TAG_FOR_SUBST"

          export FRONTEND_IMAGE_URL_FOR_SUBST="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY_ID }}/${{ env.FRONTEND_IMAGE_NAME }}:$FRONTEND_TAG_FOR_SUBST"
          export BACKEND_IMAGE_URL_FOR_SUBST="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY_ID }}/${{ env.BACKEND_IMAGE_NAME }}:$BACKEND_TAG_FOR_SUBST"
          export GAR_REPOSITORY_ID_FOR_SUBST="${{ env.GAR_REPOSITORY_ID }}"
          export GCP_PROJECT_ID_FOR_SUBST="${{ env.GCP_PROJECT_ID }}"
          export GAR_LOCATION_FOR_SUBST="${{ env.GAR_LOCATION }}"

          envsubst < .github/cloudrun/service.template.yaml > .github/cloudrun/service.deploy.yaml

          echo "Generated .github/cloudrun/service.deploy.yaml:"
          cat .github/cloudrun/service.deploy.yaml

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }} # Project ID is still needed for the action context
          metadata: .github/cloudrun/service.deploy.yaml
